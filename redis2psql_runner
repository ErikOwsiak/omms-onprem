#!/usr/bin/env python3

import time, psutil
import threading as th
import setproctitle, redis
from core.redis2psql import redis2psql
from psql.dbConnServer import dbConnServer
from core.debug import debug
from core.utils import sysUtils as utils


REDIS_PWD = "Q@@bcd!234##!"
PROC_NAME = "redis2psql"
REDIS_HOST = "localhost"
REDIS_PORT = 6379
# -- dev box --
if debug.is_dev_box():
   REDIS_HOST = "localhost"
   REDIS_PORT = 16379


red: redis.Redis = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PWD)
if not red.ping():
   print(f"Can't Ping Redis Server: {REDIS_HOST}:{REDIS_PORT}")
   exit(1)


PSQL_DB = dbConnServer.getConnection()
__redis2psql: redis2psql = redis2psql(red=red, psqlConn=PSQL_DB)
__redis2psqlTh: th.Thread = th.Thread(target=__redis2psql.run, args=())


def main():
   # -- -- -- --
   _dict = {"boot_dts_utc": utils.dts_utc()
      , "lan_ip": utils.lan_ip(), "hostname": utils.HOST}
   red.select(1)
   red.hset("OMMS_ONPREM", mapping=_dict)
   # -- -- -- --
   __redis2psqlTh.start()
   while True:
      try:
         time.sleep(8.0)
         print("main_loop")
         if __redis2psqlTh.is_alive():
            print("__redis2psqlTh.is_alive")
         red.hset("OMMS_ONPREM", "last_tick", utils.dts_utc())
      except Exception as e:
         print(e)
         time.sleep(16.0)


# -- -- start here -- --
if __name__ == "__main__":
   proc_name = "red2psqlRunr"
   # -- look for previous prox --
   for p in psutil.process_iter():
      try:
         if p.name() == proc_name:
            print(F"PreviousProcFound | PID: {p.pid}\n\tkilling...")
            p.kill()
      except Exception as e:
         print(e)
   # -- start --
   setproctitle.setproctitle(proc_name)
   main()
