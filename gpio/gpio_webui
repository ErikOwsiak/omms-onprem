#!/usr/bin/env python3

import json, os.path, sys
import configparser as _cp, redis, setproctitle
from flask import Flask, render_template, request as req, make_response
try:
   from core.debug import debug
   from core.utils import sysUtils
   from ommslib.shared.core.datatypes import redisDBIdx
except Exception as e:
   print(os.getcwd())
   os.chdir("../")
   sys.path.append(os.getcwd())
   print(os.getcwd())
   from core.debug import debug
   from core.utils import sysUtils
   from ommslib.shared.core.datatypes import redisDBIdx
   os.chdir("gpio")

# -- load ini file --
GPIO_INI_FILE = "gpio.ini"
if not os.path.exists(GPIO_INI_FILE):
   print(f"PathNotFound: {GPIO_INI_FILE}")
   exit(-1)
GPIO_INI: _cp.ConfigParser = _cp.ConfigParser()
GPIO_INI.read(GPIO_INI_FILE)
HTTP_PORT: int = GPIO_INI.getint("HTTP", "PORT")

# -- -- -- --
REDIS_SEC = "REDIS_PROD"
if debug.is_dev_box():
   REDIS_SEC = "REDIS_DEV"

# -- -- -- --
RED: _cp.SectionProxy = GPIO_INI[REDIS_SEC]
RED_CORE: _cp.SectionProxy = GPIO_INI["REDIS_CORE"]
REDIS: redis.Redis = redis.Redis(host=RED.get("HOST")
   , port=RED.getint("PORT"), password=RED_CORE.get("PWD"))
if not REDIS.ping():
   print("RedisBadPing!")
   exit(2)


CTYPE_JSON = "text/json"
CTYPE_TEXT = "text/plain"
STATIC_DIR = "www"
TMPL_DIR = "www/tmplts"


APP_NAME = "gpio-ui"
app = Flask(APP_NAME, static_url_path=""
   , static_folder=STATIC_DIR, template_folder=TMPL_DIR)


@app.route("/", methods=["GET"])
@app.route("/home", methods=["GET"])
def index():
   key = "mode"
   if key in req.args:
      mode = req.args[key]
   else:
      ua = req.headers.get("User-Agent")
      if ua.upper().find("MOBILE") > -1:
         mode = "mobile"
      else:
         raise Exception("BadRequest")
   # -- --
   buff = render_template("idx.html", _mode=mode)
   # -- --
   return buff


@app.route("/setconf", methods=["POST"])
def api_setconf():
   try:
      jsobj = req.json
      jsobj["dtsutc"] = sysUtils.dts_utc()
      buff = json.dumps(jsobj)
      # -- -- -- --
      if REDIS.ping():
         pin_key: str = sysUtils.pin_redis_key(jsobj["devid"], jsobj["chnl"])
         REDIS.select(int(redisDBIdx.DB_IDX_GPIO.value))
         REDIS.hset(pin_key, "CONF", buff)
         REDIS.hset(pin_key, "CHANNEL_NAME", jsobj["chnlName"])
      else:
         print("BadRedisPing")
      # -- -- -- --
      return f"OK"
   except Exception as e:
      print(e)
      return str(e)


@app.route("/getconf/<devid>/<chnl>", methods=["GET"])
def api_getconf(devid, chnl):
   try:
      pin_key: str = sysUtils.pin_redis_key(devid, chnl)
      REDIS.select(int(redisDBIdx.DB_IDX_GPIO.value))
      val = REDIS.hgetall(pin_key)
      return json.dumps(val)
   except Exception as e:
      print(e)


@app.route("/force", methods=["POST"])
def force():
   try:
      jsobj = req.json
      jsobj["dtsutc"] = sysUtils.dts_utc()
      if REDIS.ping():
         pin_key: str = sysUtils.pin_redis_key(jsobj["devid"], jsobj["chnl"])
         REDIS.select(int(redisDBIdx.DB_IDX_GPIO.value))
         REDIS.hset(pin_key, "OVERRIDE", json.dumps(jsobj))
      else:
         print("BadRedisPing")
      return f"OK"
   except Exception as e:
      print(e)


"""
   "/api/get/list-reports";
"""
@app.route("/info")
def state_info():
   hdrs = {"AppServer": "dbEdit ver.: 0.0.3", "content-type": "text/json"}
   try:
      d: {} = {"INFO": "GPIO-WEBUI"}
      return json.dumps(d), 200, hdrs
   except Exception as e:
      print(e)


# == == == == == == == == == == == == == == == == == == == == == ==
# -- -- [ start app here ] -- --
if __name__ == "__main__":
   setproctitle.setproctitle(APP_NAME)
   app.run(host="0.0.0.0", port=HTTP_PORT, debug=True)
# == == == == == == == == == == == == == == == == == == == == == ==
