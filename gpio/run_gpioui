#!/usr/bin/env python3

import json, os.path, sys
import configparser as _cp, redis, setproctitle
from flask import Flask, render_template,\
   request as req, make_response, jsonify
from gpiolib.gpiotypes import gpioOpResp, confSetData, forceData
ROOT_DIR = os.getcwd()
print(f"ROOT_DIR: {ROOT_DIR}")
try:
   from core.debug import debug
   from core.utils import sysUtils
   from ommslib.shared.core.datatypes import redisDBIdx
except Exception as e:
   print(e)
   os.chdir("../")
   _p = os.getcwd()
   print(f"_p: {_p}")
   sys.path.insert(0, _p)
   from core.debug import debug
   from core.utils import sysUtils
   from ommslib.shared.core.datatypes import redisDBIdx
   os.chdir(ROOT_DIR)


START_INI_PATH = "start_ini"
if not os.path.islink(START_INI_PATH):
   print(f"CWD: {os.getcwd()}")
   print(f"START_INI_SIMLINK_NOT_FOUND: {START_INI_PATH}")
   exit(1)
print(f"\nSTART_INI_SIMLINK_FOUND: {START_INI_PATH}")

# -- -- -- --
GPIO_INI: _cp.ConfigParser = _cp.ConfigParser()
GPIO_INI.read(START_INI_PATH)
HTTP_PORT: int = GPIO_INI.getint("HTTP", "PORT")

# -- -- -- --
RED_SEC: _cp.SectionProxy = GPIO_INI["REDIS"]
GPIO_KEY_UPDATE: str = RED_SEC.get("GPIO_CONF_CHANGE")
REDIS: redis.Redis = redis.Redis(host=RED_SEC.get("HOST")
   , port=RED_SEC.getint("PORT"), password=RED_SEC.get("PWD"))
if not REDIS.ping():
   print("RedisBadPing!")
   exit(2)

# -- -- -- --
CTYPE_JSON = "text/json"
CTYPE_TEXT = "text/plain"
STATIC_DIR = "www"
TMPL_DIR = "www/tmplts"
IDX_PAGE = "idx.html"
RELAYS_XML: str = GPIO_INI.get("IDX_PAGE", "RELAYS_XML")
if RELAYS_XML in [None, ""]:
   RELAYS_XML = "relays.xml"
MSG_ERR_NO_RED_PONG: str = "NoRedPong"


APP_NAME = "gpio-ui"
app = Flask(APP_NAME, static_url_path=""
   , static_folder=STATIC_DIR, template_folder=TMPL_DIR)


@app.route("/", methods=["GET"])
def index():
   key = "mode"
   if key in req.args:
      mode = req.args[key]
   else:
      ua = req.headers.get("User-Agent")
      if ua.upper().find("MOBILE") > -1:
         mode = "mobile"
      else:
         mode = "iframe"
   # -- --
   return render_template(IDX_PAGE, _mode=mode, _rlsxml=RELAYS_XML)


@app.route("/setconf", methods=["POST"])
def api_setconf():
   try:
      rsp: gpioOpResp = gpioOpResp(0, "DataSaved!", "")
      data: confSetData = confSetData()
      data.load(req.json)
      # -- -- -- --
      if REDIS.ping():
         PIN_KEY: str = sysUtils.pin_redis_key(data.devid, data.chnl)
         REDIS.select(redisDBIdx.DB_IDX_GPIO.value)
         REDIS.delete(PIN_KEY)
         REDIS.hset(PIN_KEY, mapping=data.mapping())
         PUB_CHANNEL = GPIO_KEY_UPDATE.replace("!DEVID!", data.devid)
         REDIS.publish(PUB_CHANNEL.upper(), PIN_KEY)
      else:
         rsp.err = 1; rsp.msg = MSG_ERR_NO_RED_PONG
         print(rsp)
      # -- -- -- --
      return make_response(rsp.toJson(), 200)
   except Exception as e:
      print(e)
      return str(e)


@app.route("/getconf/<devid>/<chnl>", methods=["GET"])
def api_getconf(devid, chnl):
   try:
      pin_key: str = sysUtils.pin_redis_key(devid, chnl)
      REDIS.select(int(redisDBIdx.DB_IDX_GPIO.value))
      val = REDIS.hgetall(pin_key)
      jsobj = sysUtils.decode_redis(val)
      return make_response(jsonify(jsobj), 200)
   except Exception as e:
      print(e)


@app.route("/force", methods=["POST"])
def force():
   try:
      rsp: gpioOpResp = gpioOpResp(0, "ChannelForced!", "")
      data: forceData = forceData()
      data.load(req.json)
      if REDIS.ping():
         PIN_KEY: str = sysUtils.pin_redis_key(data.devid, data.chnl_id)
         REDIS.select(redisDBIdx.DB_IDX_GPIO.value)
         REDIS.hset(PIN_KEY, mapping=data.mapping())
         PUB_CHANNEL = GPIO_KEY_UPDATE.replace("!DEVID!", data.devid)
         REDIS.publish(PUB_CHANNEL.upper(), PIN_KEY)
      else:
         rsp.err = 1; rsp.msg = MSG_ERR_NO_RED_PONG
      # -- -- -- --
      return make_response(rsp.toJson(), 200)
   except Exception as e:
      print(e)
      return str(e)


"""
   "/api/get/list-reports";
"""
@app.route("/info")
def state_info():
   hdrs = {"AppServer": "dbEdit ver.: 0.0.3", "content-type": "text/json"}
   try:
      d: {} = {"INFO": "GPIO-WEBUI"}
      return json.dumps(d), 200, hdrs
   except Exception as e:
      print(e)


# == == == == == == == == == == == == == == == == == == == == == ==
# -- -- [ start app here ] -- --
if __name__ == "__main__":
   setproctitle.setproctitle(APP_NAME)
   app.run(host="0.0.0.0", port=HTTP_PORT, debug=True, use_reloader=False)
# == == == == == == == == == == == == == == == == == == == == == ==
