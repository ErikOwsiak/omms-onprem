#!/usr/bin/env python3

import flask, json, time, os, sys
import configparser as _cp, redis, setproctitle
from psycopg2.extensions import connection as _psql_conn
from flask import Flask, render_template, request as req, redirect
try:
   from api.apiOps import apiOps
   from api.dbEdit import dbEdit
   from core.debug import debug
   from core.logProxy import logProxy
   from app.qrcaccess import qrcAccess
   from app.auth import auth
   from psql.dbConnServer import dbConnServer
   from ommslib.shared.core.datatypes import redisDBIdx
except Exception as e:
   print(e)
   ROOT_DIR: str = os.getcwd()
   os.chdir("../")
   _p = os.getcwd()
   print(_p)
   sys.path.insert(0, _p)
   from api.apiOps import apiOps
   from core.debug import debug
   from psql.dbConnServer import dbConnServer
   from core.logProxy import logProxy
   from api.dbEdit import dbEdit
   from app.auth import auth
   from app.qrcaccess import qrcAccess
   from ommslib.shared.core.datatypes import redisDBIdx
   os.chdir(ROOT_DIR)


START_INI_PATH = "start_ini"
if not os.path.islink(START_INI_PATH):
   print(f"START_INI_SIMLINK_NOT_FOUND: {START_INI_PATH}")
   exit(1)
print(f"\nSTART_INI_SIMLINK_FOUND: {START_INI_PATH}")


# -- load ini file --
WEBUI_INI: _cp.ConfigParser = _cp.ConfigParser()
WEBUI_INI.read(START_INI_PATH)
WEBUI_PORT: int = WEBUI_INI.getint("HTTP", "PORT")
WANURL_GPIO: str = WEBUI_INI.get("WAN_ACCESS", "GPIO_UI")
WEB_AUTH: str = WEBUI_INI.get("HTTP", "WEB_AUTH")

# -- -- -- --
PSQL_CONN_CLOSED: bool = False
PSQL_CONN_STR = WEBUI_INI.get("PSQL", "CONN_STR")
print("\n-- [ CONNECTING TO PSQL ] --")
print(f" -> PSQL_CONN_STR: {PSQL_CONN_STR}")
PSQL_CONN: _psql_conn = dbConnServer.getConnection(PSQL_CONN_STR)
if PSQL_CONN is None:
   print("PSQL_CONN_IS_NONE")
   exit(100)
# -- test psql connection --
if PSQL_CONN.closed:
   PSQL_CONN_CLOSED = True
   print("PSQL_CONN is closed!\n")
   exit(101)
else:
   print("PSQL_CONN_OK\n")

RED_SEC: _cp.SectionProxy = WEBUI_INI["REDIS"]
RED: redis.Redis = redis.Redis(host=RED_SEC.get("HOST"), port=RED_SEC.getint("PORT")
   , password=RED_SEC.get("PWD"), decode_responses=True)
if not RED.ping():
   print("RedisBadPing!")
   exit(2)

# -- auth --
AUTH: auth = auth(ini=WEBUI_INI, red=RED)

# -- misc --
QRC_IMG_PATH = "www/imgs/qrc.png"
CTYPE_JSON = "application/json"
CTYPE_TEXT = "text/plain"

APP_NAME = "omms-webui"
app = Flask(APP_NAME, static_url_path=""
   , static_folder="www", template_folder="www")


@app.route("/", methods=["GET"])
@app.route("/home", methods=["GET"])
def index():
   if AUTH.check_net(r=req):
      return render_template("index.html", _wanurl_gpio=WANURL_GPIO)
   else:
      msg = "NO_AUTH"
      return redirect(f"/omms/ui/feedback?msg={msg}&css=no-auth", code=302)


@app.route("/feedback", methods=["GET"])
def feedback():
   msg = req.args["msg"]
   css = req.args["css"]
   return render_template("feedback.html", _msg=msg, _css=css)


"""
   "/api/get/list-reports";
"""
@app.route("/api/get/<item>", methods=["GET"])
def apiget(item):
   errcode = 200; CTYPE = "text/plain"
   # -- create api object and pass the call --
   if item == "list-reports":
      apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR)
      buffout = apiops.list_reports()
      CTYPE = CTYPE_JSON
   elif item == "clients":
      apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR, red=RED)
      buffout = apiops.list_clients()
      CTYPE = CTYPE_JSON
   elif item == "client_circuits":
      apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR, red=RED)
      clttag: str = req.args["clttag"]
      buffout = apiops.list_client_circuits(clttag)
      CTYPE = CTYPE_JSON
   elif item == "redis_data":
      apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR, red=RED)
      dbidx: int = int(req.args["dbidx"])
      keys: str = req.args["keys"]
      if keys[0] != "[" or keys[-1] != "]":
         buffout = "BadDataWrapper"; errcode = 566
      else:
         tmp: str = keys[1:-1]
         buffout = apiops.read_redis(dbidx, tmp.split("|"))
         buffout = json.dumps(buffout)
         CTYPE = CTYPE_JSON
   elif item == "utcnow_time":
      utcnow_time = int(time.time())
      buffout = {"utcnow_time": utcnow_time}
      buffout = json.dumps(buffout)
      CTYPE = CTYPE_JSON
   elif item == "clt-cir-history":
      apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR, red=RED)
      buffout = apiops.clt_cir_history()
      CTYPE = CTYPE_JSON
   elif item == "client_kwhrs":
      dts = req.args["dts"]
      cirs = req.args["cirs"]
      apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR, red=RED)
      buffout = apiops.clt_kwhrs(dts, cirs)
      CTYPE = CTYPE_JSON
   elif item == "overview":
      apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR, red=RED)
      buffout = apiops.overview()
      CTYPE = CTYPE_JSON
   else:
      buffout = ""; errcode = 404
   # -- -- return data -- --
   return buffout, errcode, {"content-type": CTYPE}


@app.route("/api/post/<item>", methods=["POST"])
def apipost(item):
   try:
      CTYPE = "text/plain"
      buffout = ""; errcode = 200
      if item == "monthly-report":
         y: str = req.values["year"]
         m: str = req.values["month"]
         apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR, red=RED)
         err, val = apiops.set_report_job(item, y, m)
         if err == 0:
            buffout = json.dumps({"ERR": 0, "REPORT_ID": val})
         if err == 1 and val == 0:
            buffout = json.dumps({"ERR": 1, "VAL": 0})
         CTYPE = CTYPE_JSON
      else:
         pass
      # -- -- return data -- --
      return buffout, errcode, {"content-type": CTYPE}
   except Exception as e:
      logProxy.log_exp(e)


@app.route("/api/get/meters/<args>", methods=["GET"])
def apiget_meters(args):
   try:
      tag, val = args.split(":")
      errcode = 200; CTYPE = "text/json"
      apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR, red=RED)
      buffout = apiops.list_client_meters(clt_dbid=int(val))
      # -- -- return data; errcode = 404 -- --
      return buffout, errcode, {"content-type": CTYPE}
   except Exception as e:
      logProxy.log_exp(e)
      return str(e)


@app.route("/api/get/qrc/<num>/<numt>", methods=["GET"])
def apiget_qrc(num, numt):
   # -- -- -- --
   remote_ip = req.headers.get("X-Forwarded-For")
   if remote_ip in [None, ""]:
      remote_ip = req.remote_addr
   # -- -- -- --
   qrca: qrcAccess = qrcAccess(red=RED, red_db_idx=redisDBIdx.DB_IDX_FLASK.value)
   err, uuid, data = qrca.create_new_qrc(WANURL_GPIO, QRC_IMG_PATH)
   _uuid, ttl = qrca.create_temp_object(remote_ip, int(num), numt, uuid)
   # -- -- -- --
   return {"ERROR": 0, "UUID": _uuid, "DATA": data, "TTL": ttl},\
      200, {"content-type": CTYPE_JSON}


@app.route("/api/qrc/validate/<_uuid>", methods=["GET"])
def apiget_validate_qrc(_uuid: str):
   qrca: qrcAccess = qrcAccess(red=RED, red_db_idx=redisDBIdx.DB_IDX_FLASK.value)
   rval, dts = qrca.validate_qrc(_uuid)
   if rval == 0:
      res: flask.Response = redirect("/omms/gpio", code=302)
      res.set_cookie(key=WEB_AUTH, value=_uuid, expires=dts)
      return res
   elif rval == 1:
      msg = "NotAuthorized"
      res: flask.Response = redirect(f"/omms/ui/feedback?msg={msg}&css=no-auth", code=302)
      return res


@app.route("/dbedit/<path:action>", methods=["GET", "POST", "DELETE"])
def dbedit(action):
   hdrs = {"AppServer": "dbEdit ver.: 0.0.3"}
   try:
      _dbedit: dbEdit = dbEdit(conn_str=PSQL_CONN_STR, action=action, req=req)
      act_run_rval = _dbedit.run_action()
      if act_run_rval == 0:
         _ctype = "text/json"
         _bout, _err = _dbedit.buffout, _dbedit.buffout_error
      else:
         _ctype = "text/json"
         _bout, _err = _dbedit.buffout, _dbedit.buffout_error
      # -- return --
      hdrs["content-type"] = _ctype
      return _bout, _err, hdrs
   except Exception as ee:
      print(ee)
      hdrs["content-type"] = "text/exception"
      return str(ee), 555, hdrs


@app.route("/state-info")
def state_info():
   hdrs = {"AppServer": "dbEdit ver.: 0.0.3", "content-type": "text/json"}
   try:
      redis_ping: bool = RED.ping()
      d: {} = {"PSQL_CONN_STR": PSQL_CONN_STR
         , "REDIS_PING": redis_ping, "PSQL_CONN_CLOSED": PSQL_CONN_CLOSED}
      # -- return --
      return json.dumps(d), 200, hdrs
   except Exception as e:
      print(e)


@app.route("/logout")
def _exit():
   return "EXIT_OK"


# == == == == == == == == == == == == == == == == == == == == == == == == == ==
# -- -- [ start app here ] -- --
if __name__ == "__main__":
   setproctitle.setproctitle(APP_NAME)
   app.run(host="0.0.0.0", port=WEBUI_PORT, debug=False)
# == == == == == == == == == == == == == == == == == == == == == == == == == ==
