#!/usr/bin/env python3

# import datetime
import json, time
import configparser as _cp, redis, setproctitle
from psycopg2.extensions import connection as _psql_conn
from flask import Flask, render_template, request as req, make_response
from api.apiOps import apiOps
from core.debug import debug
from psql.dbConnServer import dbConnServer
from core.logProxy import logProxy
from api.dbEdit import dbEdit


# -- load ini file --
WEBUI_INI: _cp.ConfigParser = _cp.ConfigParser()
WEBUI_INI.read("webui.ini")
WEBUI_PORT: int = WEBUI_INI.getint("WEBUI", "PORT")


# -- -- -- --
REDIS_SEC = "REDIS_PROD"
PSQL_CONN_SEC = "PSQL_PROD"
if debug.is_dev_box():
   PSQL_CONN_SEC = "PSQL_DEV"
   REDIS_SEC = "REDIS_DEV"
# -- -- -- --
PSQL_CONN_CLOSED: bool = False
PSQL_CONN_STR = WEBUI_INI.get(PSQL_CONN_SEC, "CONN_STR")
print(f"\nPSQL_CONN_STR: {PSQL_CONN_STR}")
PSQL_CONN: _psql_conn = dbConnServer.getConnection(PSQL_CONN_STR)
if PSQL_CONN.closed:
   PSQL_CONN_CLOSED = True
   print("PSQL_CONN is closed!\n")
   exit(1)
else:
   print("PSQL_CONN_OK\n")


RED: _cp.SectionProxy = WEBUI_INI[REDIS_SEC]
RED_CORE: _cp.SectionProxy = WEBUI_INI["REDIS_CORE"]
REDIS: redis.Redis = redis.Redis(host=RED.get("HOST")
   , port=RED.getint("PORT"), password=RED_CORE.get("PWD"))
if not REDIS.ping():
   print("RedisBadPing!")
   exit(2)


CTYPE_JSON = "text/json"
CTYPE_TEXT = "text/plain"


APP_NAME = "omms-webui"
app = Flask(APP_NAME
   , static_url_path=""
   , static_folder="www"
   , template_folder="www")


@app.route("/", methods=["GET"])
@app.route("/home", methods=["GET"])
def index():
   return render_template("index.html")


"""
   "/api/get/list-reports";
"""
@app.route("/api/get/<item>", methods=["GET"])
def apiget(item):
   buffout = ""; errcode = 200; CTYPE = "text/plain"
   # -- create api object and pass the call --
   if item == "list-reports":
      apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR)
      buffout = apiops.list_reports()
      CTYPE = CTYPE_JSON
   elif item == "clients":
      apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR, red=REDIS)
      buffout = apiops.list_clients()
      CTYPE = CTYPE_JSON
   elif item == "client_circuits":
      apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR, red=REDIS)
      clttag: str = req.args["clttag"]
      buffout = apiops.list_client_circuits(clttag)
      CTYPE = CTYPE_JSON
   elif item == "redis_data":
      # url = `/api/get/redis_data/?dbidx=2&keys=[${sp}]`;
      apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR, red=REDIS)
      dbidx: int = int(req.args["dbidx"])
      keys: str = req.args["keys"]
      if keys[0] != "[" or keys[-1] != "]":
         buffout = "BadDataWrapper"; errcode = 566
      else:
         tmp: str = keys[1:-1]
         buffout = apiops.read_redis(dbidx, tmp.split("|"))
         buffout = json.dumps(buffout)
         CTYPE = CTYPE_JSON
   elif item == "utcnow_time":
      utcnow_time = int(time.time())
      buffout = {"utcnow_time": utcnow_time}
      buffout = json.dumps(buffout)
      CTYPE = CTYPE_JSON
   else:
      buffout = ""; errcode = 404
   # -- -- return data -- --
   return buffout, errcode, {"content-type": CTYPE}

@app.route("/api/get/meters/<args>", methods=["GET"])
def apiget_meters(args):
   try:
      tag, val = args.split(":")
      errcode = 200; CTYPE = "text/json"
      apiops: apiOps = apiOps(INI=WEBUI_INI, conn_str=PSQL_CONN_STR, red=REDIS)
      buffout = apiops.list_client_meters(clt_dbid=int(val))
      # -- -- return data; errcode = 404 -- --
      return buffout, errcode, {"content-type": CTYPE}
   except Exception as e:
      logProxy.log_exp(e)
      return str(e)

@app.route("/dbedit/<path:action>", methods=["GET", "POST"])
def dbedit(action):
   hdrs = {"AppServer": "dbEdit ver.: 0.0.3"}
   try:
      _dbedit: dbEdit = dbEdit(conn_str=PSQL_CONN_STR, action=action, req=req)
      act_run_rval = _dbedit.run_action()
      if act_run_rval == 0:
         _ctype = "text/json"
         _bout, _err = _dbedit.buffout, _dbedit.buffout_error
      else:
         _ctype = "text/json"
         _bout, _err = _dbedit.buffout, _dbedit.buffout_error
      # -- return --
      hdrs["content-type"] = _ctype
      return _bout, _err, hdrs
   except Exception as e:
      hdrs["content-type"] = "text/exception"
      print(e)
      return str(e), 555, hdrs


@app.route("/api/post", methods=["POST"])
def apipost():
   pass


@app.route("/state-info")
def state_info():
   hdrs = {"AppServer": "dbEdit ver.: 0.0.3", "content-type": "text/json"}
   try:
      redis_ping: bool = REDIS.ping()
      d: {} = {"PSQL_CONN_STR": PSQL_CONN_STR
         , "REDIS_PING": redis_ping, "PSQL_CONN_CLOSED": PSQL_CONN_CLOSED}
      # -- return --
      return json.dumps(d), 200, hdrs
   except Exception as e:
      print(e)


# == == == == == == == == == == == == == == == == == == == == == == == == == ==
# -- -- start app here -- --
if __name__ == "__main__":
   setproctitle.setproctitle(APP_NAME)
   app.run(host="0.0.0.0", port=WEBUI_PORT)
# == == == == == == == == == == == == == == == == == == == == == == == == == ==
